1. You need to create (generate) latitude,longitude pairs (ie. spatial coordinates) for 9 locations. One of those will be where
your home/apartment/dorm room is. The other eight would have to be spread out - at least 100 feet between adjacent
locations (and at most 200 or 300 or even 400 feet between neighboring points) - we don't want to cover a 'huge' region, or at
the other extreme, sample just parts of a single building!
If you are on campus, you can obtain the coords of the four corners (Exposition/Vermont, Vermont/Jefferson,
Jefferson/Figueroa, Figueroa/Exposition), and get coordinates for four spots inside the campus (classrooms, labs, oLces,
restaurants, landmarks..). If you are a DEN student, please get your 8 coordinates from your place of work or your home
neighborhood (again, make sure they are not too close to each other or too far apart).
How would you obtain spatial coordinates at a location? You can do so, one of two ways:
using the Chrome browser, simply bring up this (geolocate_mod/geolocate_mod.html) page on your smartphone (that has GPS), and write down the (latitude,longitude) values that get
shown when you load/refresh the page :) As you can see, the page shows your location on a map - cool! Be sure to enable cross-site script loading when you run this (because the script is
on our Dropbox area, and accesses a map API at google.com) - click on the shield icon at the right of the URL bar, and click on 'Load unsafe scripts'. Alternately, you can use this
(geoloc2/run.html) page to obtain the (latitude,longitude) coordinates.
using your phone's built-in GPS/compass app, simply read off the displayed GPS coordinate values (if the coordinate display is in degrees, minutes and seconds, you need to convert the
minutes,seconds pair of values into a single fractional degree value - one degree is subdivided into 60 minutes (60'), and one minute is subdivided into 60 seconds (60'') - so for example,
30'15", since it is equivalent to 1815", would be eqvt to 1815/3600=0.504 degrees.
Also, be sure to write down the location names as well (you will use them to label your points when displaying). AND, take a
selGe (!) that clearly shows the location you're sampling - this step is to ensure that you're not simply reading off the coords
from a map, sitting at home!


2. Now that you have 9 coordinates and their label strings (ie. text descriptions such as "Tommy Trojan", "SAL", "Chipotle"..),
you are going to create a KML Gle (.kml format) out of them using a text editor. SpeciGcally, each location will be a 'placemark'
in your .kml Gle (with a label, and coords). Here (https://developers.google.com/kml/documentation/kml_tut#placemarks) is
more detail. The .kml Gle with the 9 placemarks is going to be your starter Gle, for doing visualizations and queries. Here
(data/starter.kml) is a .kml skeleton to get you started (just download, rename and edit it to put in your coords and labels).
NOTE - keep your labels to be 15 characters or less (including spaces).
You are going to use Google Earth to visualize the data in your KML Gle (see #3 below). FYI, as a quick check, you can also
visualize it using this (http://display-kml.appspot.com/) page - simply copy and paste your KML data into the textbox on the
left, and click 'Show it on the map' to have it be displayed on a map on the right 


3. Download Google Earth (https://www.google.com/earth/download/ge/agree.html) on your laptop, install it, bring it up.
Load your .kml Gle into it - that should show you your 9 sampled locations, on Google Earth's globe :) Take a snapshot
(screengrab) of this, for submitting.


4. Install Oracle 11g+Oracle Spatial, or Postgres+PostGIS on your laptop, and browse the docs for the spatial functions. Here
(BigSQL/index.html) is my page that walks you through installing a packaged version of Postgres.
HW3: Spatial 10/26/17, 1)41 PM
http://cs585-usc.updog.co/f17_mlA0IBg33D/hw/HW3/index.html Page 2 of 3


4 (alt). You can also use MySQL (https://dev.mysql.com/doc/refman/5.7/en/spatial-extensions.html) if you want, or even
sqlite (http://www.bostongis.com/PrinterFriendly.aspx?content_name=spatialite_tut01); if you are familiar with using SQL
Server (https://docs.microsoft.com/en-us/sql/relational-databases/spatial/spatial-data-sql-server), that can also help you do
the homework. Even QGIS (https://gis.stackexchange.com/questions/38937/how-to-connect-to-postgres-with-qgis) can be
used to do the HW.
4 (alt alt). IF YOU ARE FEELING ADVENTUROUS: as an alternative to installing Oracle or Postgres (or MySQL or sqlite or SQL
Server...) on your machine, you can use Postgres or Oracle on the AWS cloud platform (ie. without installing anything on your
laptop!) - eg. see this (https://aws.amazon.com/free/?) page, and this (https://aws.amazon.com/rds/postgresql/) one. Be
sure to not leave your DB instance running, when you aren't working on the hw!
4 (alt alt alt). Last but not least, do feel free to use GCP for this! You are already set up to do GCP-based data processing, so
why not? :) Here are some relevant resources:
* https://cloud.google.com/sql/docs/postgres/quickstart (https://cloud.google.com/sql/docs/postgres/quickstart)
* https://medium.com/google-cloud/postgres-is-incredibly-awesome-c54353b88655 (https://medium.com/google-cloud/postgres-is-incredibly-awesome-c54353b88655)
* https://cloudplatform.googleblog.com/2017/03/Cloud-SQL-for-PostgreSQL-managed-PostgreSQL-for-your-mobile-and-geospatial-applications-in-Google-Cloud.html
(https://cloudplatform.googleblog.com/2017/03/Cloud-SQL-for-PostgreSQL-managed-PostgreSQL-for-your-mobile-and-geospatial-applications-in-Google-Cloud.html)
* https://cloudplatform.googleblog.com/2017/08/Cloud-SQL-for-PostgreSQL-updated-with-new-extensions.html (https://cloudplatform.googleblog.com/2017/08/Cloud-
SQL-for-PostgreSQL-updated-with-new-extensions.html)
5. You will use the spatial db software to execute the following two spatial queries that you'll write:
* compute the convex hull for your 9 points [a convex hull (http://mathworld.wolfram.com/ConvexHull.html) for a set of 2D points is the smallest convex polygon that
contains the point set]. If you use Oracle, see this (https://docs.oracle.com/cd/A97630_01/appdev.920/a96630/sdo_aggr.htm) page; if you decide to use Postgres, read
this (http://postgis.net/docs/ST_ConvexHull.html) and this (http://stackoversow.com/questions/10461179/k-nearest-neighbor-query-in-postgis) instead. Use the query's
result polygon's coords, to create a polygon in your .kml Gle (edit the .kml Gle, add relevant XML to specify the KML polygon's coords). Load this into Google Earth, visually
verify that your 9 points are inside the convex hull, then take a screenshot. Note that even your data points happen to have a concave perimeter and/or happen to be selfintersecting,
the convex hull, by deGnition, would be a tight, enclosing boundary (hull) that is a simple convex polygon. The convex hull is a very useful object - eg. see this
(https://www.quora.com/What-are-the-real-life-applications-of-convex-hulls) discussion.. If you want to explore geometry algorithms (of which convex hull computation is
one) in more detail, this (http://geomalgorithms.com/algorithms.html) is a great resource [thanks to Mark Debord (a student from a previous offering of the course) for
the link].
* compute the three nearest neighbors of your home/apt/dormroom location [look up the spatial function to do this]. Use the query's results, to create three line segments
in your .kml Gle: line(home,neighbor1), line(home,neighbor2), line(home,neighbor3). Verify this looks correct using Google Earth, take a snapshot.
Note - it *is* OK to hardcode points, in the above queries! Or, you can create and use a table.
